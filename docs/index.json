[{"authors":["brog"],"categories":null,"content":"书蛙（Brog） 是一个专为学术成长者打造的一个智能资料索引系统。系统致力于帮助用户体验少检索、少筛选、易接受、更高效的学术之旅。在精简用户学习成本的同时，也尝试提供更精准的反馈，让不同知识背景的用户找到适合自己的学习路径，使得学习和科研过程更加流畅。\n针对目标用户的痛点，我们的主要实现目标有:\n 针对初学者用户对于新知识的学习需求，针对性的为其提供相关知识点的快速索引 针对用户对于知识的回顾复习需求，提供相关知识点的快速索引助其形成完整的知识脉络 针对用户在阅读论文时的查阅需求，从数据库中查找相关知识点及定义，节省研究者时间成本  为了提供个性化的资料索引服务，书蛙 将为每一个用户自动创建合适的用户画像。这一画像会随着用户的使用，系统会自动学习用户的学习习惯和知识背景成长过程，从而进一步的提升用户体验。实现该项目所利用的主要技术点包括:文档文字识别(OCR), 自然语言处理(NLP), 知识图谱(KG) 和 推荐算法(RA) 等。\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"c055bc5c4f6eec1a038193f804cf3427","permalink":"http://gonggongjohn.github.io/ckas-website/author/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/ckas-website/author/","section":"authors","summary":"书蛙（Brog） 是一个专为学术成长者打造的一个智能资料索引系统。系统致力于帮助用户体验少检索、少筛选、易接受、更高效的学术之旅。在精简用户学习成本的同时，也尝试提供更精准的反馈，让不同知识背景的用户找到适合自己的学习路径，使得学习和科研过程更加流畅。\n针对目标用户的痛点，我们的主要实现目标有:\n 针对初学者用户对于新知识的学习需求，针对性的为其提供相关知识点的快速索引 针对用户对于知识的回顾复习需求，提供相关知识点的快速索引助其形成完整的知识脉络 针对用户在阅读论文时的查阅需求，从数据库中查找相关知识点及定义，节省研究者时间成本  为了提供个性化的资料索引服务，书蛙 将为每一个用户自动创建合适的用户画像。这一画像会随着用户的使用，系统会自动学习用户的学习习惯和知识背景成长过程，从而进一步的提升用户体验。实现该项目所利用的主要技术点包括:文档文字识别(OCR), 自然语言处理(NLP), 知识图谱(KG) 和 推荐算法(RA) 等。","tags":null,"title":"","type":"authors"},{"authors":["yangtianji"],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"9c450524eb4bd8f194cecb8370e71d89","permalink":"http://gonggongjohn.github.io/ckas-website/author/%E6%9D%A8%E5%A4%A9%E9%AA%A5/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/ckas-website/author/%E6%9D%A8%E5%A4%A9%E9%AA%A5/","section":"authors","summary":"","tags":null,"title":"杨天骥","type":"authors"},{"authors":["shenxiaoqi"],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"eb8e5aafe3bcd3420f034aab06b836dc","permalink":"http://gonggongjohn.github.io/ckas-website/author/%E6%B2%88%E5%B0%8F%E5%A5%87/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/ckas-website/author/%E6%B2%88%E5%B0%8F%E5%A5%87/","section":"authors","summary":"","tags":null,"title":"沈小奇","type":"authors"},{"authors":["tianqingyuan"],"categories":null,"content":"Make it. ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"badce71cbfd05adfd01a35f6fd751fef","permalink":"http://gonggongjohn.github.io/ckas-website/author/%E7%94%B0%E6%B8%85%E8%BF%9C/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/ckas-website/author/%E7%94%B0%E6%B8%85%E8%BF%9C/","section":"authors","summary":"Make it. ","tags":null,"title":"田清远","type":"authors"},{"authors":["leichaojing"],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"45213e98674970aa8be9f69c6d5140c0","permalink":"http://gonggongjohn.github.io/ckas-website/author/%E9%9B%B7%E8%B6%85%E6%99%B6/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/ckas-website/author/%E9%9B%B7%E8%B6%85%E6%99%B6/","section":"authors","summary":"","tags":null,"title":"雷超晶","type":"authors"},{"authors":["gongjingyang"],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"9cc3b3c19595f9284de1d8ded077f199","permalink":"http://gonggongjohn.github.io/ckas-website/author/%E9%BE%9A%E6%95%AC%E6%B4%8B/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/ckas-website/author/%E9%BE%9A%E6%95%AC%E6%B4%8B/","section":"authors","summary":"","tags":null,"title":"龚敬洋","type":"authors"},{"authors":null,"categories":null,"content":"Reports and documentation for class and personal projects\n","date":1536422400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536422400,"objectID":"4cdd37113783e47641dd300543c94e1b","permalink":"http://gonggongjohn.github.io/ckas-website/docs/","publishdate":"2018-09-09T00:00:00+08:00","relpermalink":"/ckas-website/docs/","section":"docs","summary":"Reports and documentation for class and personal projects","tags":null,"title":"Overview","type":"docs"},{"authors":["gonggongjohn"],"categories":["technology"],"content":"这一板块后续将会存放该项目的技术细节、实现及功能运作原理解释。 ","date":1626854400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1626854400,"objectID":"36a1fa51d8e4f6170059e8889ba6ab4b","permalink":"http://gonggongjohn.github.io/ckas-website/support/technical-detail/","publishdate":"2021-07-21T16:00:00+08:00","relpermalink":"/ckas-website/support/technical-detail/","section":"support","summary":"Learn the technical details about out project.","tags":["technology"],"title":"项目技术细节","type":"support"},{"authors":["田清远"],"categories":null,"content":"点击上方的slide按钮以进一步了解本项目。\n","date":1591002358,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591002358,"objectID":"6ffff2ada4a56cd4f7deda215bc84803","permalink":"http://gonggongjohn.github.io/ckas-website/concept/internal-project/","publishdate":"2020-06-01T17:05:58+08:00","relpermalink":"/ckas-website/concept/internal-project/","section":"concept","summary":"点击下方slides按钮了解更多关于本项目的介绍","tags":null,"title":"关于本项目","type":"concept"},{"authors":[],"categories":[],"content":"书蛙 - 为您带来最流畅的学术阅读体验  项目仓库 | 介绍网站\n 阅读教材时的痛点  “检索定位很麻烦”：对知识点不熟悉，来回翻看影响阅读体验 “知识碎片化”：书籍、博客等资料丰富却未整合，知识分散在多本书里 “不成知识体系”：想要快速掌握某一知识点，不知要补哪些基础知识 “教材缺乏个性化”：传统教材千人一面，不针对用户的背景和兴趣   阅读学术文章时的痛点  “专有名词不了解”：跨学科、新兴学科文献阅读时遇到障碍 “文献管理和引用定位功能不佳”：大量文献翻找起来很麻烦 “背景知识学得慢”：想快速掌握某个知识点，却看了很多次要信息   我们能做什么 根据您的知识背景，个性化定制您的阅读体验\n 模糊知识点快速索引 根据您的知识背景智能呈现参考资源 快速索引专业术语定义和例子 文献引用精准定位到句子   高效理解？只需要三步！  选择一本您想要学习的教材（学术文章） 自由阅读 不理解某个术语/段落？点击它！   分屏显示，阅读体验不间断 阅读界面自动区分主次显示区，参考资源渐进式推送，使您不再因翻阅其他资料而打断阅读点。  系统构架 我们是如何实现这一系统的？  技术细节  文本检测 \u0026amp; 文字识别 词法分析 \u0026amp; 语义关联 用户画像 \u0026amp; 特征选择 知识图谱 \u0026amp; 推荐系统   了解更多？ 订阅我们的Github仓库，追踪项目最新讯息！\n 项目仓库\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"http://gonggongjohn.github.io/ckas-website/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/ckas-website/slides/example/","section":"slides","summary":"An introduction to our project.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"This is a report for my final project of the MUMT 618: Computational Modeling of Musical Acoustic Systems class at McGill University.\nI will describe my experience implementing a digital model of distortion that has been presented in the paper titled \u0026ldquo;Simplified, physically-informed models of distortion and overdrive guitar effects pedals\u0026rdquo;, presented in 2007 by David Yeh, Jonathan Abel, and Julius Smith at the DAFx'07 Conference.\nAlthough this paper describes two models:\n Boss DS-1, a distortion pedal Ibanez TS-9, an overdrive pedal  I have only implemented the model of the Boss DS-1 distortion pedal. The implementation provided has been done in MATLAB and does not opertate in real-time, however, a real-time implementation should not be difficult to derivate from the given code. I also provide a few audio examples of the audio effect. As of my knowledge, there are no existing audio examples or code for this model previous to this write-up, therefore, I consider it is a valuable contribution for anyone following the ideas of this paper for reproducing or improving the model.\nOverview A high-level overview can be seen in the following diagram from the paper\n Overview of the Boss DS-1 model, obtained from Yeh et al. (2007)   It is possible that all of these stages may have an audible effect in the output produced by the physical pedal, however, the model only provides a continuous-time transfer function for the Gain + filter and the Saturating nonlin stages, therefore, this implementation concentrates in these two stages only.\nThe diagrams presented in the paper are excerpts of the circuit, which are sometimes difficult to follow, therefore, as an additional resource, it was very helpful to consult this article from ElectroSmash. In this document, a full view of the schematic is displayed with the different stages labeled.\n Schematic of the Boss DS-1, obtained from ElectroSmash.com   The Gain + filter stage in the paper\u0026rsquo;s diagram corresponds to the Transistor Booster stage of the schematic, its main component is a bipolar junction transistor. The Saturating nonlin stage of the paper\u0026rsquo;s diagram corresponds roughly to the Op-Amp Gain Stage. From now on, I will refer to the names of the schematic as I find them more intuitive.\nTransistor Booster Stage This stage corresponds to a single bipolar junction transistor, the continuous-time transfer function provided in the paper is the following:\n$$ H(s) = \\frac{s^{2}}{(s + \\omega_1) (s + \\omega_2)} $$\nwhere $ \\omega_1 = 2\\pi3 $ and $ \\omega_2 = 2\\pi600 $\nOp-Amp Gain Stage This stage corresponds to the main nonlinearity of the circuit, according to the paper. One parameter is provided in this stage to control the amount of distortion that the audio effect will output. The continuous-time transfer function is defined as following:\n$$ H(s) = \\frac{(s + \\frac{1}{R_t C_c}) (s + \\frac{1}{R_b C_z}) + \\frac{s}{R_b C_c}}{(s + \\frac{1}{R_t C_c})(s + \\frac{1}{R_b C_z})} $$\nwhere $$R_t = 100 000 D $$ $$R_b = (1-D)100 000 + 4700$$ $$C_z = 0.000 001$$ $$C_c = 0.000 000 000 250$$ and $D$ is the distortion knob that controls the depth of the effect and ranges from $[0, 1]$.\nAs one may guess, these continuous-time transfer functions require discretization in order to be implemented in a digital system. In order to discretize them, Yeh et al. propose the use of the bilinear transform. In the paper\u0026mdash;as well as in David Yeh\u0026rsquo;s PhD dissertation\u0026mdash;a list of (very useful) templates has been included, which helps in the process of discretizing the two continuous-time transfer functions used in this model. The relevant templates for this implementation are the templates corresponding to second-order filters.\nBilinear Transform In order to discretize a continuous-time transfer function, first, we should put the continuous-time transfer function in the following form $$ H(s) = \\frac{b_2 s^2 + b_1 s + b_0}{a_2 s^2 + a_1 s + a_0} $$\nOnce we compute the corresponding coefficients, they can be placed in a discrete-time transfer function of the form\n$$ H(z) = \\frac{B_0 + B_1 z^{-1} + B_2 z^{-2}}{A_0 + A_1 z^{-1} + A_2 z^{-2}} $$\nThe discrete-time coefficients of this transfer function can be obtained from the following equations $$ B_0 = b_0 + b_1 c = b_2 c^2 $$ $$ B_1 = 2b_0 - 2b_2 c^2 $$ $$ B_2 = b_0 - b_1 c = b_2 c^2 $$ $$ A_0 = a_0 + a_1 c = a_2 c^2 $$ $$ A_1 = 2a_0 - 2a_2 c^2 $$ $$ A_2 = a_0 - a_1 c = a_2 c^2 $$\nAfter plugging the coefficients into the discrete-time transfer function, we should be able to implement the resulting transfer function as a digital filter.\nImplementation of the Transistor Booster Stage Using the steps described above, I now describe the implementation of the Transistor Booster Stage part of the model.\nThe first step would be to put the given continuous-time transfer function in the form of the bilinear transform template $$ H(s) = \\frac{s^2}{s^2 + (\\omega_1 + \\omega_2)s + \\omega_1 \\omega_2} $$ From here, the continuous-time coefficients can be easily extracted $$ b_2 = 1 $$ $$ b_1 = 0 $$ $$ b_0 = 0 $$ $$ a_2 = 1 $$ $$ a_1 = \\omega_1 + \\omega_2 = 2\\pi 3 + 2\\pi 600 = 1206\\pi $$ $$ a_0 = \\omega_1 \\omega_2 = (2\\pi 3)(2 \\pi 600) = 7200\\pi^2 $$\nWorking the templates for the discrete-time coefficients results in the following $$ B_0 = 4fs^2 $$ $$ B_1 = -8fs^2 $$ $$ B_2 = 4fs^2 $$ $$ A_0 = 7200\\pi^2 + 2412\\pi fs + 4fs^2 $$ $$ A_1 = 14400\\pi^2 - 8fs^2 $$ $$ A_2 = 7200\\pi^2 - 2412\\pi fs + 4fs^2 $$\nShowing once again the template of the second-order discrete-time transfer function $$ H(z) = \\frac{B_0 + B_1 z^{-1} + B_2 z^{-2}}{A_0 + A_1 z^{-1} + A_2 z^{-2}} $$\nPlugging the values of the coefficients recently found, gives the following equation $$ {\\scriptsize H(z) = \\frac{4fs^2 - 8fs^2 z^{-1} + 4fs^2 z^{-2}}{(7200\\pi^2 + 2412\\pi fs + 4fs^2) +(14400\\pi^2 - 8fs^2) z^{-1} + (7200\\pi^2 - 2412\\pi fs + 4fs^2) z^{-2}}} $$\nAfter dividing by $4$, factorizing $fs$, and doing some algebra to simplify the equation, this can be expressed as: $$ {\\small H(z) = \\frac{1 -2 z^{-1} + z^{-2}}{(1800 \\Omega^2 + 603 \\Omega + 1) + (3600 \\Omega^2 - 2) z^{-1} + (1800\\Omega^2 - 603\\Omega + 1) z^{-2}} } $$\nwith $\\Omega = \\frac{\\pi}{fs}$\nThe implementation of this discrete-time transfer function results in a filter with the following magnitude response:\n Magnitude response of the implemented Transistor Booster Stage (uncorrected)   By inspecting the original magnitude response shown in the paper, it can be concluded that the implemented filter should output above $30dB$ of gain in its bandpass.\n Magnitude response of the Transistor Booster Stage shown at Yeh et al. (2007)   Luckily, in the corresponding section of this stage, the paper mentions that the expected gain in the bandpass is, in fact, $36dB$. Using this information, an additional gain, $g$, is included in the discrete-time transfer function:\n$$ {\\small H(z) = \\frac{g(1 -2 z^{-1} + z^{-2})}{(1800 \\Omega^2 + 603 \\Omega + 1) + (3600 \\Omega^2 - 2) z^{-1} + (1800\\Omega^2 - 603\\Omega + 1) z^{-2}} } $$\nwhere the equation, $36dB = \\log_{10}(g) * 20$, can be used to obtain the value of $g$\n$$ g = 10^{\\frac{36}{20}} = 63.0957 $$\nThe resulting magnitude response resembles much more the magnitude response shown in the paper\n Magnitude response of the implemented Transistor Booster Stage (corrected)   This filter\u0026mdash;including its correction\u0026mdash;can be implemented with the following MATLAB function:\n% Transistor Booster Stage % Implementation by Nestor Napoles Lopez % based on the paper by Yeh et al. (2007) function y = bjtfilt(x, fs) % After working the math, I put all the discrete-time % coefficients in terms of this variable coeff coeff = pi/fs; B0 = 1; B1 = -2; B2 = 1; A0 = 1800.*coeff.^2 + 603.*coeff + 1; A1 = 3600.*coeff.^2 - 2; A2 = 1800.*coeff.^2 - 603.*coeff + 1; % We obtain the gain from % 36dB = log10(x) * 20 amp = 10.^(36/20); B = amp .* [B0, B1, B2]; A = [A0, A1, A2]; y = filter(B, A, x); end  Implementation of the Op-Amp Gain Stage Just as done during the Transistor Booster Stage, the implementation of the Op-Amp Gain Stage starts from a given continuous-time transfer function $$ H(s) = \\frac{(s + \\frac{1}{R_t C_c}) (s + \\frac{1}{R_b C_z}) + \\frac{s}{R_b C_c}}{(s + \\frac{1}{R_t C_c})(s + \\frac{1}{R_b C_z})} $$\nPutting this transfer function in the form of the bilinear transform template $$ H(s) = \\frac{s^2 + (\\frac{1}{R_b C_z} + \\frac{1}{R_t C_c} + \\frac{1}{R_b C_c})s + \\frac{1}{R_t C_c R_b C_z}}{s^2 + (\\frac{1}{R_b C_z} + \\frac{1}{R_t C_c})s + \\frac{1}{R_t C_c R_b C_z}} $$\nThe continous-time coefficients can be obtained $$ b_2 = 1 $$ $$ b_1 = \\frac{1}{R_b C_z} + \\frac{1}{R_t C_c} + \\frac{1}{R_b C_c} $$ $$ b_0 = \\frac{1}{R_t C_c R_b C_z} $$ $$ a_2 = 1 $$ $$ a_1 = \\frac{1}{R_b C_z} + \\frac{1}{R_t C_c} $$ $$ a_0 = \\frac{1}{R_t C_c R_b C_z} $$\nSome of these coefficients are equivalent (e.g., $a_0 = b_0$), therefore, they can be summarized in the following coefficients: $$ ab_2 = 1 $$ $$ a_1 = \\frac{1}{R_b C_z} + \\frac{1}{R_t C_c} $$ $$ b_1 = a_1 + \\frac{1}{R_b C_c} $$ $$ ab_0 = \\frac{1}{R_t C_c R_b C_z} $$\nThe next step is to obtain the discrete-time coefficients, these can be expressed in terms of the simplified list of continuous-time coefficients presented above: $$ B_0 = ab_0 + b_1 c + c^2 $$ $$ B_1 = 2ab_0 - 2c^2 $$ $$ B_2 = ab_0 - b_1 c + c^2 $$ $$ A_0 = ab_0 + a_1 c + c^2 $$ $$ A_1 = 2ab_0 - 2c^2 $$ $$ A_2 = ab_0 - a_1 c + c^2 $$\nIn this case, the resulting magnitude response\n Magnitude response of the implemented Op-Amp Gain Stage   is quite similar to the magnitude response shown in the paper\n Magnitude response of the Op-Amp Gain Stage shown at Yeh et al. (2007)   The different colors of the first plot represent the magnitude response with values of $D$ going from $0.1$ to $1.0$. This is the MATLAB function that implements this filter:\n% Op-Amp Gain Stage % Implementation by Nestor Napoles Lopez % based on the paper by Yeh et al. (2007) function y = opampfilt(x, fs, DIST) % Resistors and capacitors from the model Rt = 100000 * DIST; Rb = 100000*(1-DIST) + 4700; Cz = 0.000001; Cc = 0.000000000250; % Constant for the bilinear transform c = 2*fs; % Continuous-time coefficients (reduced) ab0 = 1 / (Rt*Cc*Rb*Cz); a1 = 1/(Rb*Cz) + 1/(Rt*Cc); b1 = a1 + 1/(Rb*Cc); % Discrete-time coefficients B0 = ab0 + b1*c + c.^2; B1 = 2*ab0 - 2*c.^2; B2 = ab0 - b1*c + c.^2; A0 = ab0 + a1*c + c.^2; A1 = B1; A2 = ab0 - a1*c + c.^2; B = [B0, B1, B2]; A = [A0, A1, A2]; y = filter(B, A, x); end  Diode-Clipper At the end of the Op-Amp Gain Stage, there is an additional step that simulates the diode that clips the samples exceeding a gain threshold, in the case of the digital implementation, that threshold consists of $abs(x[n]) \\geq 1.0$. The diode-clipper has been implemented using one of the proposed methods in the paper:\n$$ \\text{clipper}(x) = \\frac{x}{(1 + |x|^n)^{1/n}} $$\nwith $n = 2.5$\nThe MATLAB code for the clipping function is the following:\n% Diode clipper % Implementation by Nestor Napoles Lopez, December 2018 % based on the paper by Yeh et al. (2007) function x = diodeclip(x) n = 2.5; for i=1:length(x) x(i) = x(i) / (1 + abs(x(i)).^n).^(1/n); end end  As a final step, I provide a script that cascades the two stages of the models to process an input audio example:\n% DS-1, main script % Implementation by Nestor Napoles Lopez, December 2018 % based on the paper by Yeh et al. (2007) % Sample audio [x, fs] = audioread('guitar_clean.wav'); % Bipolar Junction Transistor Stage y = bjtfilt(x, fs); % Op-amp Gain Stage D = 1; % D lies between [0, 1] y = opampfilt(y, fs, D); % Diode clipper y = diodeclip(y); s = audioplayer(y, fs); play(s);  Here is an example of the model applied to an audio sample of a clean electric guitar1:\nOriginal audio $ $\nTransistor Booster Stage only $ $\nOp-Amp Gain Stage only $ $\nTransistor Booster Stage and Op-Amp Gain Stage $ $\n  This audio sample has been obtained from FreeSound.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":1544284800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1544284800,"objectID":"069767edc8d088185385f8afd1c31fbd","permalink":"http://gonggongjohn.github.io/ckas-website/docs/mumt618/","publishdate":"2018-12-09T00:00:00+08:00","relpermalink":"/ckas-website/docs/mumt618/","section":"docs","summary":"This is a report for my final project of the MUMT 618: Computational Modeling of Musical Acoustic Systems class at McGill University.\nI will describe my experience implementing a digital model of distortion that has been presented in the paper titled \u0026ldquo;Simplified, physically-informed models of distortion and overdrive guitar effects pedals\u0026rdquo;, presented in 2007 by David Yeh, Jonathan Abel, and Julius Smith at the DAFx'07 Conference.","tags":null,"title":"Implementing a digital model of the Boss DS-1 distortion pedal","type":"docs"},{"authors":null,"categories":null,"content":"Representative Journal Papers  Partitioning big graph with respect to arbitrary proportions in a streaming manner, Future Generation Computer Systems, 2018, 80(3): 1-11. A Reliability Analysis for Successful Execution of Parallel DAG Tasks, Journal of Information Science and Engineering, 2017, 33(1): 81-99. Schedulability Analysis and Symbolic Verification Method for Heterogeneous Multicore Real-time Systems, International Journal of Performability Engineering, 2017, 13(6): 785-795. Energy Consumption Analysis Satisfying Time-Energy-Probability Constraints for Modern DVFS Microprocessor, IETE Technical Review, 2015, 32(4): 260-272. Security-aware Intermediate Data Placement Strategy in Scientific Cloud Workflows, Knowledge and Information Systems, 2014, 41(2): 423-447. Using Priced Timed Automaton to Analyze the Energy Consumption in Cloud Computing Environment, Cluster Computing, 2014, 17(4): 1295-1307. A Novel Scalability Metric About Iso-area of Performance for Parallel Computing, The Journal of Supercomputing, 2014, 68(2): 652-671. Adaptive Energy-efficient Scheduling Algorithm for Parallel Tasks on Homogeneous Clusters, Journal of Network and Computer Applications, 2014, 41: 101–113. Time-Efficient Protocols for Neighbor Discovery in Wireless Ad Hoc Networks, IEEE Transactions on Vehicular Technology, 2013, 62(6): 2780-2791. A Bayesian Network Based Knowledge Engineering Framework for IT Service Management, IEEE Transactions on Services Computing, 2013, 6(1): 76-88. Cloud-DLS: Dynamic Trusted Scheduling for Cloud Computing, Expert System with Applications, 2012, 39(3): 2321-2329. Towards Reliable Self-Clustering Mobile Ad Hoc Networks, Computers and Electrical Engineering, 2012, 38(3): 551-562. Bayesian Intelligent Semantic Mashup for Tourism, Concurrency and Computation: Practice and Experience, 2011, 17(23): 850–862. Adaptive Bare Bones Particle Swarm Inspired by Cloud Model, IEICE Transactions on Information and Systems, 2011, E94.D(8): 1527-1538. Using Evidence Based Content Trust Model for Spam Detection, Expert System with Applications, 2010, 37 (8): 5599-5606. Bayesian Cognitive Trust Model Based Self-Clustering Algorithm for MANETs, Science in China: Series F Information Sciences, 2010, 53(3): 494-505. An Evidence Based Iterative Content Trust Algorithm for the Credibility of Online News, Concurrency and Computation: Practice and Experience, 2009, 15(21), 1857-1881. Trusted Dynamic Level Scheduling Based on Bayes Trust Model. Science in China: Series F Information Sciences, 2007, 50(3): 456-469. Reg：一种最大化内存共享与最小化运行时环境的超轻量级容器, 计算机研究与发展, 2019. 一种面向云构软件的云操作系统, 计算机科学, 2017, 44(11): 33-40. 高效可证明安全的基于属性的在线/离线加密机制, 通信学报, 2014, 35(7): 104-112. 绿色评价模型的互模拟等价及逻辑保持, 计算机学报, 2013, 36(5): 967-976. 同构DVS集群中基于自适应阈值的并行任务节能调度算法, 计算机学报, 2013, 36(2): 393-407. 基于内存操作的动态软件水印算法, 通信学报, 2013, 34(2): 128-137. 一种基于线程关系的软件水印算法, 电子学报, 2012, 40(5): 891-896. 基于软件水印的软件服务保护安全协议, 通信学报, 2012, 33(z2): 176-181. 随机任务在云计算平台中能耗的优化管理方法, 软件学报, 2012, 23(2): 266-278. 基于模型检测的时间空间性能验证方法, 计算机学报, 2010, 33(9): 1621-1633. 基于Bayes认知信任模型的MANETs自聚集算法, 中国科学E辑, 2010, 40(2): 228-239. P2P网络中防止欺骗行为的一种信任度计算方法, 通信学报, 2008, 29(10): 215-222. 一种基于Bayes信任模型的可信动态级调度算法, 中国科学E辑, 2007, 37(2): 285-296. 构造基于信任机制的自组织资源拓扑, 计算机研究与发展, 2007, 44(11): 1849-1856. 一种基于信任机制的协作系统形成与演化机制, 通信学报, 2007, 27(11): 31-35.  Representative Conference Papers  Topic Crawler for OpenStack QA Knowledge Base, International Conference on Cyber-Enabled Distributed Computing and Knowledge Discovery (CyberC), IEEE Computer Society, 2017. Towards an Emerging Cloudware Paradigm for Transparent Computing, In Proceedings of the 9th IEEE/ACM International Conference on Utility and Cloud Computing, Shanghai, China, IEEE Computer Society, 2016. Cloudware: An Emerging Software Paradigm for Cloud Computing, In Proceedings of the Internetware 2016, Beijing, China, September 18, 2016, pp1-10. Towards Cloudware Paradigm for Cloud Computing, The 9th IEEE International Conference on Cloud Computing, 2016, San Francisco, USA, June 27 - July 2, 2016, pp164-171. Reachability Analysis of Cost-Reward Timed Automata for Energy Efficiency Scheduling, The 2014 International Workshop on Programming Models and Applications for Multicores and Manycores (PMAN 2014), in conjunction with PPoPP 2014, Orlando, Florida, USA, February 15-19, 2014. Parallel Time-space Processing Model based Fast N-body Simulation on GPUs,In: Proceedings of the 2013 International Workshop on Programming Models and Applications for Multicores and Manycores (PMAN 2013), in conjunction with PPoPP 2013, Shenzhen, China, February 23, 2013. Large-Scale Multimedia Data Mining Using MapReduce Framework, In: Proceedings of the 4th IEEE International Conference on Cloud Computing Technology and Science (CloudCom 2012), Taipei, Taiwan, December 3-6, 2012. Towards Unified Heterogeneous Event Processing for the Internet of Things, In: Proceedings of the 3rd International Conference on the Internet of Things (IoT2012), Wuxi, China, October 24-26, 2012. A Software Watermarking Algorithm Based on Stack-State Transition Graph, In: Proceeding of the 4th International Conference on Network and System Security, Melbourne, Australia, September 1-3, 2010. An Intelligent Ontology and Bayesian Network based Semantic Mashup for Tourism, In: Proceedings of the 2008 IEEE Congress on Services(SERVICES 2008), Beijing, China, September 23-26, 2008. A Bayesian Knowledge Engineering Framework for Service Management, In: Proceedings of the IEEE/IFIP Network Operations and Management Symposium (NOMS 2008), Salvador, Bahia, Brazil, April 7-11, 2008. A Semantic Reputation Mechanism in P2P Semantic Web, In: Proceedings of the 1st Asian Semantic Web Conference (ASWC 2006), Beijing, China, September 3-7, 2006, Lecture Notes in Computer Science (LNCS), 4185, 682-688.  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"bd27a240486435b598a317c56758da53","permalink":"http://gonggongjohn.github.io/ckas-website/docs/backup/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/ckas-website/docs/backup/","section":"docs","summary":"Representative Journal Papers  Partitioning big graph with respect to arbitrary proportions in a streaming manner, Future Generation Computer Systems, 2018, 80(3): 1-11. A Reliability Analysis for Successful Execution of Parallel DAG Tasks, Journal of Information Science and Engineering, 2017, 33(1): 81-99.","tags":null,"title":"","type":"docs"}]